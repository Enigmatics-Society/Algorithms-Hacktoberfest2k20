# -*- coding: utf-8 -*-
"""Dynamic Programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xBmaT7U1hmvZHdCXUv4Rqc5hE2bVMNvh
"""

# Matrix Chain Multiplication

dynMatrix = [[-1 for x in range(1001)] for x in range(1001)] # Memoization Matrix
for i in range(1001):
    for j in range(1001):
        if i == 0 or j == 0:
            dynMatrix[i][j] = 0

def mcm(arr, i, j):
    if i == j:
        return 0
    global dynMatrix
    if dynMatrix[i][j] != -1:
        return dynMatrix[i][j]

    minM = float('inf')
    for k in range(i, j):
        x = mcm(arr, i, k) + mcm(arr, k+1, j) + arr[i-1]*arr[k]*arr[j]
    #         Left-Side         Right Side       Actual Number of Ops 
        minM = min(x, minM)

    dynMatrix[i][j] = minM
    return minM

a = [1,2,3,4,5]
print(mcm(a, 1, len(a)-1))  # i=1 as matrix dims = arr[i] x arr[i-1]